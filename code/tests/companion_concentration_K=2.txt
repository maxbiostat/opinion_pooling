source("../pooling_aux.r")

m0 <- 1 ; v0 <- .25^2
m1 <- 2 ; v1 <- .5^2

mv <- c(m0, m1)
vv <- c(v0, v1)
K <- length(mv)

## Observed data
na <- 5
nb <- 50
nc <- 500
sigmasq <- 1^2
truemu <- 2
set.seed(333^2)
ya <- rnorm(na, mean = truemu, sd  = sqrt(sigmasq))
yb <- rnorm(nb, mean = truemu, sd  = sqrt(sigmasq))
yc <- rnorm(nc, mean = truemu, sd  = sqrt(sigmasq))
X <- c(2, 2)
###########
# a closer look at the marginal posterior for alpha
# Prior
a0 <- X[1]
b0 <- X[2]

## Posterior
marginal_alpha <- function(x, y, log = FALSE){
  ppars <- pool_par_gauss(c(x, 1-x), m = mv, v = vv)
  ans <- normal_mean_marg_like(y = y, sigma = sqrt(sigmasq), m = ppars[1], v = ppars[2]^2, log = TRUE)  + dbeta(x, a0, b0, log = TRUE)
  if(!log) ans <- exp(ans)
  return(ans)
}
marginal_alpha <- Vectorize(marginal_alpha, vectorize.args = "x")

## ugly hack, can't be asked to figure this out; there must a more elegant way
Za <- integrate(marginal_alpha, y = ya, 0, 1)$value
Zb <- integrate(marginal_alpha, y = yb, 0, 1)$value
Zc <- integrate(marginal_alpha, y = yc,  0, 1)$value

marginal_alpha_norm <- function(x, y, Z, log = FALSE){
  ans <- marginal_alpha(x, y = y, log = TRUE) - log(Z)
  if(!log) ans <- exp(ans)
  return(ans)
}
marginal_alpha_norm <- Vectorize(marginal_alpha_norm, vectorize.args = "x")

ZZa <- integrate(function(x) marginal_alpha_norm(x, y = ya, Z = Za), 0, 1, subdivisions = 1e4)$value
ZZb <- integrate(function(x) marginal_alpha_norm(x, y = yb, Z = Zb), 0, 1, subdivisions = 1e4)$value
ZZc <- integrate(function(x) marginal_alpha_norm(x, y = yc, Z = Zc), 0, 1, subdivisions = 1e4)$value

max.alpha0 <- 1
min.dens <- 0
max.dens <- max(marginal_alpha_norm(seq(1e-2, .99, length.out = 100), y = yc, Z = Zc)/ZZc)

curve(marginal_alpha_norm(x, y = ya, Z = Za)/ZZa, lty = 2, lwd = 2,
      xlab = expression(alpha[0]), ylab = "Density",
      xlim = c(0, max.alpha0), ylim = c(min.dens, max.dens))
curve(marginal_alpha_norm(x, y = yb, Z = Zb)/ZZb, lwd = 2, lty = 3, col = 2, add = TRUE)
curve(marginal_alpha_norm(x, y = yc, Z = Zc)/ZZc, lwd = 2, lty = 4,  col = 3, add = TRUE)
curve(dbeta(x, a0, b0), lwd = 2, lty = 1,  add = TRUE)
legend(x = "topright", bty = 'n',
       col = c(1, 1, 2, 3),
       lty = c(1, 2, 3, 4),
       legend = c("Prior", paste0("n=", na), paste0("n=", nb), paste0("n=", nc) ) )

# ####
# E[alpha_0]
(mu.quad.a <- integrate(function(x) x*marginal_alpha_norm(x, y = ya, Z = Za), 0 , 1)$value/ZZa )
(mu.quad.b <- integrate(function(x) x*marginal_alpha_norm(x, y = yb, Z = Zb), 0 , 1)$value/ZZb )
(mu.quad.c <- integrate(function(x) x*marginal_alpha_norm(x, y = yc, Z = Zc), 0 , 1)$value/ZZc )
# SD(alpha_0)
ex2.a <- integrate(function(x) x*x*marginal_alpha_norm(x, y = ya, Z = Za), 0 , 1)$value/ZZa
ex2.b <- integrate(function(x) x*x*marginal_alpha_norm(x, y = yb, Z = Zb), 0 , 1)$value/ZZb
ex2.c <- integrate(function(x) x*x*marginal_alpha_norm(x, y = yc, Z = Zc), 0 , 1)$value/ZZc

sqrt(ex2.a - mu.quad.a^2)
sqrt(ex2.b - mu.quad.b^2)
sqrt(ex2.c - mu.quad.c^2)

( shrinkage.ab <- 1 - sqrt(ex2.b - mu.quad.b^2)/sqrt(ex2.a - mu.quad.a^2) )
( shrinkage.bc <- 1 - sqrt(ex2.c - mu.quad.c^2)/sqrt(ex2.b - mu.quad.b^2) )

